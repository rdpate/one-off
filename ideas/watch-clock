#!/bin/sh -Cue
#.help
##% MESSAGE
##
##Say MESSAGE with style.
# %
#
# Say the time with style.
##
##Options:
##-xV --xyx=VALUE             option xyz uses VALUE

# selected exit codes from BSD man sysexits:
    # 64  usage error   eg. wrong arguments or bad syntax
    # 65  data error    incorrect user input data (not system data)
    # 66  no input      user input file did not exist or was not readable
    # 69  unavailable   service is unavailable or catch-all
    # 70  internal software error
    # 71  OS error
    # 73  can't create  user output file cannot be created
    # 74  IO error
    # 75  temp failure  reattempt later
    # 78  config error  something was unconfigured or misconfigured
fatal() { rc="$1"; shift; printf %s\\n "${0##*/} error: $*" >&2 || true; exit "$rc"; }
nonfatal() { printf %s\\n "${0##*/}: $*" >&2 || true; }

center=true
handle_option() {
    case "$1" in
        # add options here, with common checks:
            #[ $# = 2 ] || fatal 64 "missing value for option $1"
            #[ $# = 1 ] || fatal 64 "unexpected value for option $1"
            #[ -n "${2:-}" ] || fatal 64 "missing value for option $1"
            #[ -n "$2" ] || fatal 64 "expected non-empty value for option $1"
            # $2 is only empty for "--long-option=" (equals with no following value)
        *) fatal 64 "unknown option $1" ;;
        esac
    }
while [ $# -gt 0 ]; do
    case "$1" in
        --) shift; break ;;
        --*=*) x="${1#--}"; handle_option "${x%%=*}" "${x#*=}"; shift ;;
        --*) handle_option "${1#--}"; shift ;;
        -?) handle_option "${1#-}"; shift ;;
        -?*)
            v="${1#??}"
            x="${1%"$v"}"
            handle_option "${x#-}" "$v"
            shift
            ;;
        *) break ;;
        esac
    done
[ $# = 0 ] || fatal 70 'unexpected arguments'
#case "$#" in
#    0) fatal 70 'missing MESSAGE argument' ;;
#    1) ;;
#    *) fatal 70 'unexpected extra arguments' ;;
#    esac

c0=\
'###'\
'# #'\
'# #'\
'# #'\
'###'

c1=\
' # '\
'## '\
' # '\
' # '\
'###'

c2=\
'###'\
'  #'\
'###'\
'#  '\
'###'

c3=\
'###'\
'  #'\
' ##'\
'  #'\
'###'

c4=\
'  #'\
'# #'\
'###'\
'  #'\
'  #'

c5=\
'###'\
'#  '\
'###'\
'  #'\
'###'

c6=\
'#  '\
'#  '\
'###'\
'# #'\
'###'

c7=\
'###'\
'  #'\
' # '\
' # '\
' # '

c8=\
'###'\
'# #'\
'###'\
'# #'\
'###'

c9=\
'###'\
'# #'\
'###'\
'  #'\
'  #'

ccolon=\
'   '\
' * '\
'   '\
' * '\
'   '

[ -t 1 ] || fatal 70 'output not a terminal'
if [ -n "${TMUX:-}" ]; then
    exec tmux new-window env -uTMUX "$0"
    fi
c="$(printf '\e[7m \e[m')"
fmt='%-I:%M:%S'
digit_width=40
fmt='%-I:%M'
digit_width=20
cols="$(tput cols)"
if [ 80 -lt "$cols" ]; then
    cols=80
    fi
pad_cols=$(( ( $cols - $digit_width ) / 2 ))
pad_lines=$(( $(tput lines) / 2 - 3 ))
show_time() {
    time="$(date "+$fmt")"
    if $center; then
        clear
        x=0
        while [ "$x" != "$pad_lines" ]; do
            printf \\n
            x=$((x + 1))
            done
        prefix=''
        x=0
        while [ "$x" != "$pad_cols" ]; do
            prefix="$prefix "
            x=$((x + 1))
            done
    else
        printf \\n
        prefix='   '
        fi
    for line in 1-3 4-6 7-9 10-12 13-15; do
        t="$time"
        printf %s "$prefix"
        while [ -n "$t" ]; do
            x="${t#?}"
            d="${t%"$x"}"
            t="$x"
            case "$d" in
                ':') v=ccolon ;;
                *) v="c$d" ;;
                esac
            # printf ' %s' "$(eval "printf %s \"\$$v\"" | cut "-b$line" | sed "s,#,$d,g")"
            # printf ' %s' "$(eval "printf %s \"\$$v\"" | cut "-b$line")"
            printf ' %s' "$(eval "printf %s \"\$$v\"" | cut "-b$line" | sed "s,#,$c,g")"
            done
        printf \\n
        done
    printf \\n
    }
show_time
trap 'clear; tput cnorm' exit int
tput civis
case "$fmt" in
    *%S)
        while sleep 1; do
            show_time
            done
        ;;
    *)
        while sleep "$(( 60 - $(date +%S) ))"; do
            show_time
            done
        ;;
    esac
