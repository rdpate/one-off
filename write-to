#!/bin/sh -ue
#.help
# write-to FILE COMMAND..
# write-to -iX FILE COMMAND..
#
# Run command with standard output redirected to FILE.
#
# Options:
# -a  --append                  append to FILE
# -iX --in-progress=X           write to FILE.X, rename to FILE on success
# -IN --in-progress-as=NAME     write to NAME, rename to FILE on success
#     --no-keep                 remove in-progress file or FILE on failure

# TODO: maybe rename --no-keep as --discard (--discard-on-error?)
# TODO: document "opposite" options (--no-append, --no-in-progress, --keep)

fatal() {
    printf %s\\n "$(basename "$0") error: $2" >&2
    exit "$1"
}
is_digits() {
    local x; for x; do case "$x" in *[!0-9]*|'') return 1 ;; *) ;; esac done
}
is_integer() {
    local x; for x; do case "$x" in -*) is_digits "${x#-}" || return 1 ;; *[!0-9]*|'') return 1 ;; *) ;; esac done
}

append=false
in_progress=
in_progress_as=false
keep=true
handle_option() {
    case "$1" in
        # add options here, with common checks:
            #[ $# = 2 ] || fatal 64 "missing value for option $1"
            #[ $# = 1 ] || fatal 64 "unexpected value for option $1"
            #is_digits "$2" || fatal 64 "expected (non-negative) integer for option $1"
            #is_integer "$2" || fatal 64 "expected integer for option $1"
        # less commonly useful:
            #[ -n "$2" ] || fatal 64 "empty value for option $1"
            # $2 is only empty for "--long-option=" (equals with no following value)

        a|append)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            append=true
            ;;
        no-append)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            append=false
            ;;
        i|in-progress)
            [ $# = 2 ] || fatal 64 "missing value for option $1"
            case "$2" in
                */*) fatal 64 '--in-progress name cannot contain /' ;;
            esac
            in_progress="$2"
            in_progress_as=false
            ;;
        I|in-progress-as)
            [ $# = 2 ] || fatal 64 "missing value for option $1"
            [ $# = 2 ] || fatal 64 'missing --in-progress-as value'
            in_progress="$2"
            in_progress_as=true
            ;;
        no-in-progress)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            in_progress=
            in_progress_as=false
            ;;
        keep)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            keep=true
            ;;
        no-keep)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            keep=false
            ;;

        *) fatal 64 "unknown option $1" ;;
    esac
}

while [ $# -gt 0 ]; do
    case "$1" in
        --) shift; break ;;
        --*=*) x="${1#--}"; handle_option "${x%%=*}" "${x#*=}"; shift ;;
        --*) handle_option "${1#--}"; shift ;;
        -?) handle_option "${1#-}"; shift ;;
        -?*)
            v="${1#??}"
            x="${1%"$v"}"
            handle_option "${x#-}" "$v"
            shift
            ;;
        *) break ;;
    esac
done

if [ $# = 0 ]; then
    fatal 64 'missing file and command arguments'
elif [ $# = 1 ]; then
    fatal 64 'missing command argument'
fi

if $append && [ -n "$in_progress" ]; then
    fatal 64 'cannot append with in-progress file'
fi

output_file="$1"
shift
case "$output_file" in
    -*) output_file="./$output_file" ;;
esac

if [ -n "$in_progress" ]; then
    if ! $in_progress_as; then
        in_progress="$output_file.$in_progress"
    fi
    rc=0
    if $append; then
        cp "$output_file" "$in_progress"
        # TODO: what cp options?
        "$@" 1>>"$in_progress" || rc=$?
    else
        "$@" 1>"$in_progress" || rc=$?
    fi
    if [ $rc = 0 ]; then
        mv -f "$in_progress" "$output_file" || fatal 73 "failed to mv -f $in_progress $output_file"
        # TODO: what to do if mv fails?
    elif ! $keep; then
        rm -f "$in_progress" || true
    fi
    exit $rc
elif ! $keep; then
    rc=0
    if $append; then
        "$@" 1>>"$output_file" || rc=$?
    else
        "$@" 1>"$output_file" || rc=$?
    fi
    if [ $rc != 0 ]; then
        rm -f "$output_file" || true
    fi
    exit $rc
else
    if $append; then
        exec "$@" 1>>"$output_file"
    else
        exec "$@" 1>"$output_file"
    fi
fi
