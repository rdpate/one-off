#!/bin/sh -Cue
#.help
# % COMMAND..
#
# Options:
#     --max-lines=N             truncate errors/output to N lines (default 1000)
#     --sleep-random-mins=M     sleep up to M minutes before command
#
# Uses temp files /tmp/cronic.PID.{out,err}.
#
# Based on Cronic v2 by Chuck Houpt <http://habilis.net/cronic/>.

fatal() { rc="$1"; shift; printf %s\\n "${0##*/} error: $*" >&2 || true; exit "$rc"; }
nonfatal() { printf %s\\n "${0##*/}: $*" >&2 || true; }

is_digits() { for x; do case "$x" in *[!0123456789]*|'') return 1 ;; esac; done; }

max_lines=1000
sleep_max=0
handle_option() {
    case "$1" in
        max-lines)
            [ $# = 2 ] || fatal 64 "missing value for option $1"
            is_digits "$2" || fatal 64 "expected (non-negative) integer for option $1"
            max_lines="$2"
            ;;
        sleep-random-mins)
            [ $# = 2 ] || fatal 64 "missing value for option $1"
            is_digits "$2" || fatal 64 "expected (non-negative) integer for option $1"
            sleep_max="$(($2 * 60))"
            ;;
        *) fatal 64 "unknown option $1" ;;
        esac
    }
while [ $# -gt 0 ]; do
    case "$1" in
        --) shift; break ;;
        --=*) fatal 64 'missing option name' ;;
        --*=*)
            x="${1#--}"
            v="${x#*=}"
            x="${x%%=*}"
            case "$x" in
                :?*|*[\ \`\~\!\@\#\$\%\^\&\*\\\|\;\'\"\?]*) fatal 64 'bad option name' ;;
                :)
                    shift
                    x="$v"
                    while [ -n "$x" ]; do
                        v="${x%?}"
                        set -- -"${x#"$v"}" "$@"
                        x="$v"
                        done
                    ;;
                *)
                    handle_option "$x" "$v"
                    shift
                    ;;
                esac
            ;;
        --:) shift ;;
        --:*|--*[\ \`\~\!\@\#\$\%\^\&\*\\\|\;\'\"\?]*) fatal 64 'bad option name' ;;
        --*) handle_option "${1#--}"; shift ;;
        -[\ \`\~\!\@\#\$\%\^\&\*\=\\\|\;\'\"\?]*) fatal 64 'bad option name' ;;
        -:*)
            x="${1#??}"
            shift
            while [ -n "$x" ]; do
                v="${x%?}"
                set -- -"${x#"$v"}" "$@"
                x="$v"
                done
            ;;
        -?) handle_option "${1#-}"; shift ;;
        -?*)
            v="${1#??}"
            x="${1%"$v"}"
            handle_option "${x#-}" "$v"
            shift
            ;;
        *) break ;;
        esac
    done
[ $# != 0 ] || fatal 64 'missing COMMAND arguments'

random() {
    # return integer from [0, $1)
    printf %s "$(($(hexdump -e'"%u"' -n4 /dev/urandom) * $1 / 4294967296))"
    }
if [ 0 -lt "$sleep_max" ]; then
    sleep "$(random "$sleep_max")"
    fi

out="/tmp/cronic.$$.out"
err="/tmp/cronic.$$.err"
trap 'rm "$out" "$err"' EXIT
result=0
"$@" >"$out" 2>"$err" || result=$?

squote() {
    while [ $# != 0 ]; do
        if [ -n "$1" ] && [ x"$(printf %s "$1" | tr -d -c \\055_/0-9A-Za-z)" = x"$1" ]; then
            printf %s${2+' '} "$1"
        else
            printf \'%s\'${2+' '} "$(printf %s "$1" | sed -r s/\'/\'\\\\\'\'/g)"
            fi
        shift
        done
    }
if [ $result -ne 0 -o -s "$err" ]; then
    out_lines="$(wc -l <"$out" | sed -r 's/^ +//')"
    err_lines="$(wc -l <"$err" | sed -r 's/^ +//')"
    printf %s\\n \
        "Cronic detected failure or error output for command:" \
        "$(squote "$@")" \
        "Exit status: $result" \
        ''
    if [ $err_lines -gt $max_lines ]; then
        printf %s\\n "Error output ($err_lines lines, truncated to $max_lines):"
        head -n"$max_lines" "$err"
    else
        printf %s\\n "Error output ($err_lines lines):"
        cat "$err"
        fi
    if [ $out_lines -gt $max_lines ]; then
        printf \\n%s\\n "Standard output ($out_lines lines, truncated to $max_lines):"
        head -n"$max_lines" "$out"
    else
        printf \\n%s\\n "Standard output ($out_lines lines):"
        cat "$out"
        fi
    fi
