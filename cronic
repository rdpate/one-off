#!/bin/sh -ue
#.help
# cronic COMMAND..
#
# Options:
#     --max-lines=N             truncate errors/output to N lines (default 1000)
#     --sleep-random-mins=M     sleep up to M minutes before command
#
# Based on Cronic v2 by Chuck Houpt <http://habilis.net/cronic/>.

fatal() {
    printf %s\\n "$(basename "$0") error: $2" >&2
    exit "$1"
}
is_digits() {
    local x; for x; do case "$x" in *[!0-9]*|'') return 1 ;; *) ;; esac done
}
is_integer() {
    local x; for x; do case "$x" in -*) is_digits "${x#-}" || return 1 ;; *[!0-9]*|'') return 1 ;; *) ;; esac done
}

max_lines=1000
sleep_max=0
handle_option() {
    case "$1" in
            #[ $# = 2 ] || fatal 64 "missing value for option $1"
            #[ $# = 1 ] || fatal 64 "unexpected value for option $1"
            #is_digits "$2" || fatal 64 "expected (non-negative) integer for option $1"
            #is_integer "$2" || fatal 64 "expected integer for option $1"
            #[ -n "$2" ] || fatal 64 "empty value for option $1"
            # $2 is only empty for "--long-option=" (equals with no following value)
        max-lines)
            [ $# = 2 ] || fatal 64 "missing value for option $1"
            is_digits "$2" || fatal 64 "expected (non-negative) integer for option $1"
            max_lines="$2"
            ;;
        sleep-random-mins)
            [ $# = 2 ] || fatal 64 "missing value for option $1"
            is_digits "$2" || fatal 64 "expected (non-negative) integer for option $1"
            sleep_max="$(($2 * 60))"
            ;;
        *) fatal 64 "unknown option $1" ;;
    esac
}
while [ $# -gt 0 ]; do
    case "$1" in
        --) shift; break ;;
        --*=*) x="${1#--}"; handle_option "${x%%=*}" "${x#*=}"; shift ;;
        --*) handle_option "${1#--}"; shift ;;
        -?) handle_option "${1#-}"; shift ;;
        -?*)
            v="${1#??}"
            x="${1%"$v"}"
            handle_option "${x#-}" "$v"
            shift
            ;;
        *) break ;;
    esac
done

if [ $# = 0 ]; then
    fatal 64 'missing COMMAND arguments'
fi

random() {
    # return integer from [0, $1)
    printf %s "$(($(hexdump -e'"%u"' -n4 /dev/urandom) * $1 / 4294967296))"
}
if [ 0 -lt "$sleep_max" ]; then
    sleep "$(random "$sleep_max")"
fi

out="/tmp/cronic.$$.out"
err="/tmp/cronic.$$.err"
result=0
"$@" >"$out" 2>"$err" || result=$?

if [ $result -ne 0 -o -s "$err" ]; then
    out_lines="$(wc -l <"$out" | sed -r 's/^ +//')"
    err_lines="$(wc -l <"$err" | sed -r 's/^ +//')"
    cat - <<END
Cronic detected failure or error output for command:
$*

Exit status: $result

END
    if [ $err_lines -gt $max_lines ]; then
        printf %s\\n "Error output ($err_lines lines, truncated to $max_lines):"
        head -n"$max_lines" "$err"
    else
        printf %s\\n "Error output ($err_lines lines):"
        cat "$err"
    fi
    if [ $out_lines -gt $max_lines ]; then
        printf \\n%s\\n "Standard output ($out_lines lines, truncated to $max_lines):"
        head -n"$max_lines" "$out"
    else
        printf \\n%s\\n "Standard output ($out_lines lines):"
        cat "$out"
    fi
fi

rm -f "$out" "$err"
