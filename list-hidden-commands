#!/usr/bin/env python3.4
# list-hidden-commands [--path=PATH] [COMMAND]..
#
# List commands that hide other commands in PATH.
#
# Output format:
#   /path/to/command: /hidden/command /other/hidden/command

import os
import sys
from pathlib import Path

def parse_opts(args):
    """yield (name, value) options, then modify args in-place"""
    for n, x in enumerate(args):
        if x == "--":
            del args[:n + 1]
            break
        elif x.startswith("-") and len(x) != 1:
            if x.startswith("--"):
                name, sep, value = x[2:].partition("=")
                if not sep:
                    value = None
            else:
                name, value = x[1], x[2:] or None
            yield name, value
        else:
            del args[:n]
            break
    else:
        del args[:]

def main(args):
    PATH = os.environ["PATH"]
    for opt_name, opt_value in parse_opts(args):
        if opt_name == "path":
            if opt_value is None:
                return "--path value expected"
            PATH = opt_value
        else:
            return "unknown option: " + opt_name
    PATH = list(map(Path, PATH.split(os.pathsep)))

    if not args:
        def match(x):
            return True
    else:
        def match(x):
            return x in args

    seen = set()
    for n, top in enumerate(PATH[:-1]):
        for top_name in sorted(top.iterdir()):
            if not top_name.is_file() or not match(top_name.name):
                continue
            if top_name.name in seen:
                continue
            seen.add(top_name.name)
            hidden = []
            for sub in PATH[n + 1:]:
                if sub == top:
                    continue
                sub_name = sub / top_name.name
                if sub_name.is_file() and sub_name not in hidden:
                    hidden.append(sub_name)
            if hidden:
                print("{}: {}".format(top_name, " ".join(map(str, hidden))))

if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
