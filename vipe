#!/bin/sh -Cue
#.help
# % [FILE]
#
# Write stdin to FILE, edit, write FILE to stdout.  If not given, FILE is generated and removed afterwards.  If stdout is a terminal and FILE was given, contents are not written to stdout.
#
# Options:
# -a  --append                append input to FILE
# -f  --force                 clobber FILE

# selected exit codes from BSD man sysexits:
    # 64  usage error   eg. wrong arguments or bad syntax
    # 65  data error    incorrect user input data (not system data)
    # 66  no input      user input file did not exist or was not readable
    # 69  unavailable   service is unavailable or catch-all
    # 70  internal software error
    # 71  OS error
    # 73  can't create  user output file cannot be created
    # 74  IO error
    # 75  temp failure  reattempt later
    # 78  config error  something was unconfigured or misconfigured
fatal() { rc="$1"; shift; printf %s\\n "${0##*/} error: $*" >&2 || true; exit "$rc"; }
nonfatal() { printf %s\\n "${0##*/}: $*" >&2 || true; }

mode=create
handle_option() {
    case "$1" in
        # add options here, with common checks:
            #[ $# = 2 ] || fatal 64 "missing value for option $1"
            #[ $# = 1 ] || fatal 64 "unexpected value for option $1"
            #[ -n "${2:-}" ] || fatal 64 "missing value for option $1"
            #[ -n "$2" ] || fatal 64 "expected non-empty value for option $1"
            # $2 is only empty for "--long-option=" (equals with no following value)
        a|append)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            mode=append
            ;;
        f|force)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            mode=clobber
            ;;
        *) fatal 64 "unknown option $1" ;;
        esac
    }
while [ $# -gt 0 ]; do
    case "$1" in
        --) shift; break ;;
        --*=*) x="${1#--}"; handle_option "${x%%=*}" "${x#*=}"; shift ;;
        --*) handle_option "${1#--}"; shift ;;
        -?) handle_option "${1#-}"; shift ;;
        -?*)
            v="${1#??}"
            x="${1%"$v"}"
            handle_option "${x#-}" "$v"
            shift
            ;;
        *) break ;;
        esac
    done

[ -t 2 ] || fatal 64 'stderr must be a terminal'
case "$#" in
    0)
        file="$(mktemp --tmpdir vipe.XXXXXX)"
        trap 'rm "$file"' exit
        keep_file=false
        ;;
    1)
        file="$1"
        keep_file=true
        ;;
    *) fatal 64 'unexpected arguments' ;;
    esac
case "$mode" in
    create)
        [ ! -s "$file" ] || fatal 64 "file exists with non-zero size: $file"
        cat >|"$file"
        ;;
    append) cat >>"$file" ;;
    clobber) cat >|"$file" ;;
    esac
if [ -t 1 ] && $keep_file; then
    exec "${VISUAL-${EDITOR-vim}}" "$file" <&2 >&2
    fi
"${VISUAL-${EDITOR-vim}}" "$file" <&2 >&2
cat <"$file"
