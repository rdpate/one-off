#!/usr/bin/env python3.6
#.help
# tarsnap-prune-old BASE
#
# Prune tarsnap archives matching BASE.YYYY-MM-DD_HH:NN:SS older than --keep-days and not the first archive in that month.
#
# Options:
#     --dry-run             show deletions without executing
#     --keep-days=N         keep all archives younger than N days (default: 30)
#
# Tarsnap Options:
#     --tarsnap=TARSNAP     use TARSNAP instead of "tarsnap" command
#     --keyfile=KEYFILE     tarsnap --keyfile

import datetime
import os
import subprocess
import sys

class CodeMessageExit(SystemExit):
    def __init__(self, code, message, program=None):
        SystemExit.__init__(self, code)
        self.message = message
        self.program = program
class UsageError(CodeMessageExit):
    def __init__(self, message, program=None):
        CodeMessageExit.__init__(self, 64, message, program)

def pop_opts(args):
    """yield (name, value) options, then modify args in-place"""
    for n, x in enumerate(args):
        if x == "--":
            del args[:n + 1]
            break
        elif x.startswith("-") and len(x) != 1:
            if x.startswith("--"):
                name, sep, value = x[2:].partition("=")
                if not sep:
                    value = None
            else:
                name, value = x[1], x[2:] or None
            yield name, value
        else:
            del args[:n]
            break
    else:
        del args[:]

class Tarsnap:
    def __init__(self, command="tarsnap", *, keyfile=None, verbose=print):
        if command is None:
            command = "tarsnap"
        self.command = command
        self.keyfile = keyfile
        self.verbose = verbose
    def list_archives(self, prefix=None):
        args = [self.command, "--list-archives"]
        if self.keyfile is not None:
            args.extend(["--keyfile", self.keyfile])
        # TODO: iterate output instead of slurp
        if self.verbose:
            self.verbose(*args)
        archives = subprocess.check_output(args).decode().splitlines()
        if prefix is None:
            yield from archives
        else:
            for x in archives:
                if x.startswith(prefix):
                    yield x
    def _do_delete(self, archives, dry_run):
        args = [self.command, "-d", "--keep-going"]
        if self.keyfile is not None:
            args.extend(["--keyfile", self.keyfile])
        if self.verbose:
            self.verbose(*args)
        if dry_run:
            for x in archives:
                dry_run("  -f", x)
            return
        for x in archives:
            args.append("-f")
            args.append(x)
        subprocess.check_call(args)
        if self.verbose:
            for x in archives:
                self.verbose("# deleted", x)
    def delete_archives(self, archives, dry_run=False):
        rm = []
        for x in archives:
            rm.append(x)
            # TODO: remove magic number
            if len(rm) == 10:
                self._do_delete(rm, dry_run)
                rm.clear()
        if rm:
            self._do_delete(rm, dry_run)

def run(args):
    dry_run = False
    keep_days = 30
    tarsnap = None
    keyfile = None
    for name, value in pop_opts(args):
        # if name == "option-requires-value":
        #     if value is None:
        #         raise UsageError("missing value for option " + name)
        # elif name == "option-without-value":
        #     if value is not None:
        #         raise UsageError("unexpected value for option " + name)
        # elif name == "digits-value":
        #     if not value or not all(x in "0123456789" for x in value):
        #         raise UsageError("expected (non-negative) integer for option " + name)
        #     value = int(value)
        # elif name == "integer-value":
        #     try:
        #         value = int(value or "")
        #     except ValueError:
        #         raise UsageError("expected integer for option " + name)
        # elif name == "non-empty-value":
        #     # value is only an empty string for "--long-option=" (equals with no following value)
        #     if value == "":
        #         raise UsageError("expected non-empty value for option " + name)
        #     # value might be None! test (not value) above to exclude None too
        if name == "dry-run":
            dry_run = True
        elif name == "keep-days":
            if not value or not all(x in "0123456789" for x in value):
                raise UsageError("expected (non-negative) integer for option " + name)
            keep_days = int(value)
        elif name == "tarsnap":
            if value == "":
                raise UsageError("expected non-empty value for option " + name)
            tarsnap = value
        elif name == "keyfile":
            if value == "":
                raise UsageError("expected non-empty value for option " + name)
            keyfile = value
        else:
            raise UsageError("unknown option " + name)
    tarsnap = Tarsnap(tarsnap, keyfile=keyfile)
    if not args:
        raise UsageError("expected archive BASE argument")
    if len(args) > 1:
        raise UsageError("unknown extra arguments")

    now = datetime.datetime.utcnow()
    prefix = args[0] + "."

    to_remove = []
    monthly = {}
    # TODO: remove shortcut to not read all archives at once
    for name in sorted(tarsnap.list_archives(prefix)):
        try:
            stamp = datetime.datetime.strptime(name[len(prefix):], "%Y-%m-%d_%H:%M:%S")
        except ValueError:
            continue
        if (now - stamp).days < keep_days:
            continue
        month = (stamp.year, stamp.month)
        month_first = monthly.get(month)
        if month_first is None:
            monthly[month] = name
        else:
            to_remove.append(name)

    if not to_remove:
        print("# nothing to prune")
    else:
        tarsnap.delete_archives(to_remove, print if dry_run else False)

def main(args):
    try:
        return run(args)
    except subprocess.CalledProcessError as e:
        return e.returncode
    except CodeMessageExit as e:
        program = e.program
        if program is None:
            program = os.path.basename(sys.argv[0])
        sys.stderr.write(f"{program} error: {e.message}\n")
        return e.code

if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
